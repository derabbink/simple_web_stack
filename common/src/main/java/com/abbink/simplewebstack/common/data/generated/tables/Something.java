/**
 * This class is generated by jOOQ
 */
package com.abbink.simplewebstack.common.data.generated.tables;


import com.abbink.simplewebstack.common.data.generated.Keys;
import com.abbink.simplewebstack.common.data.generated.Public;
import com.abbink.simplewebstack.common.data.generated.tables.records.SomethingRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Something extends TableImpl<SomethingRecord> {

	private static final long serialVersionUID = 147520762;

	/**
	 * The reference instance of <code>PUBLIC.SOMETHING</code>
	 */
	public static final Something SOMETHING = new Something();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SomethingRecord> getRecordType() {
		return SomethingRecord.class;
	}

	/**
	 * The column <code>PUBLIC.SOMETHING.ID</code>.
	 */
	public final TableField<SomethingRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>PUBLIC.SOMETHING.NAME</code>.
	 */
	public final TableField<SomethingRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.SOMETHING</code> table reference
	 */
	public Something() {
		this("SOMETHING", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.SOMETHING</code> table reference
	 */
	public Something(String alias) {
		this(alias, SOMETHING);
	}

	private Something(String alias, Table<SomethingRecord> aliased) {
		this(alias, aliased, null);
	}

	private Something(String alias, Table<SomethingRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<SomethingRecord, Integer> getIdentity() {
		return Keys.IDENTITY_SOMETHING;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<SomethingRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_8;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<SomethingRecord>> getKeys() {
		return Arrays.<UniqueKey<SomethingRecord>>asList(Keys.CONSTRAINT_8);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Something as(String alias) {
		return new Something(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Something rename(String name) {
		return new Something(name, null);
	}
}
