/**
 * This class is generated by jOOQ
 */
package com.abbink.simplewebstack.data.generated.tables;


import com.abbink.simplewebstack.data.generated.Keys;
import com.abbink.simplewebstack.data.generated.Public;
import com.abbink.simplewebstack.data.generated.tables.records.AppsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Apps extends TableImpl<AppsRecord> {

    private static final long serialVersionUID = 1504582207;

    /**
     * The reference instance of <code>PUBLIC.APPS</code>
     */
    public static final Apps APPS = new Apps();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppsRecord> getRecordType() {
        return AppsRecord.class;
    }

    /**
     * The column <code>PUBLIC.APPS.ID</code>.
     */
    public final TableField<AppsRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_45DDFAC0_423B_40F5_8573_6B62732C8696)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>PUBLIC.APPS.XID</code>.
     */
    public final TableField<AppsRecord, String> XID = createField("XID", org.jooq.impl.SQLDataType.CHAR.length(10).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.APPS.NAME</code>.
     */
    public final TableField<AppsRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.APPS.ENABLED</code>.
     */
    public final TableField<AppsRecord, Integer> ENABLED = createField("ENABLED", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.APPS.REDIRECT_URI</code>.
     */
    public final TableField<AppsRecord, String> REDIRECT_URI = createField("REDIRECT_URI", org.jooq.impl.SQLDataType.VARCHAR.length(250).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.APPS</code> table reference
     */
    public Apps() {
        this("APPS", null);
    }

    /**
     * Create an aliased <code>PUBLIC.APPS</code> table reference
     */
    public Apps(String alias) {
        this(alias, APPS);
    }

    private Apps(String alias, Table<AppsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Apps(String alias, Table<AppsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AppsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_APPS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AppsRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AppsRecord>> getKeys() {
        return Arrays.<UniqueKey<AppsRecord>>asList(Keys.CONSTRAINT_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Apps as(String alias) {
        return new Apps(alias, this);
    }

    /**
     * Rename this table
     */
    public Apps rename(String name) {
        return new Apps(name, null);
    }
}
